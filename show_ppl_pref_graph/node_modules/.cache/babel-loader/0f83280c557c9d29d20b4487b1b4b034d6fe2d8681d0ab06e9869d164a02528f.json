{"ast":null,"code":"var _jsxFileName = \"/show_ppl_pref_graph/src/createLayout.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CheckField from './checkField';\nimport Graph from './graph';\nimport * as resasApi from './resasApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Styles = {\n  label: {\n    fontSize: '20px',\n    marginLeft: '10pt'\n  }\n};\nconst CreateLayout = () => {\n  _s();\n  const [prefectures, setPreFectures] = useState(null);\n  const [prefPopulation, setPrefPopulation] = useState([]);\n  //Reactのレンダリング完了後の処理\n  useEffect(() => {\n    // 都道府県一覧を取得する\n    const getPreFectures = async () => {\n      let preFecturesData = await resasApi.getPreFectures();\n      setPreFectures(preFecturesData);\n    };\n    getPreFectures();\n  }, []);\n\n  // チェックボックスをクリックした際の処理\n  const handleClickCheck = async (prefName, prefCode, check) => {\n    let c_prefPopulation = prefPopulation.slice();\n    if (check) {\n      if (c_prefPopulation.findIndex(value => value.prefName === prefName) !== -1) {\n        return;\n      }\n      let preFecturePplData = await resasApi.getPreFecturePpl(String(prefCode));\n      c_prefPopulation.push({\n        prefName: prefName,\n        data: preFecturePplData\n      });\n    } else {\n      const deleteIndex = c_prefPopulation.findIndex(value => value.prefName === prefName);\n      if (deleteIndex === -1) return;\n      c_prefPopulation.splice(deleteIndex, 1);\n    }\n    setPrefPopulation(c_prefPopulation);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: Styles.label,\n      children: \"\\u90FD\\u9053\\u5E9C\\u770C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), prefectures && /*#__PURE__*/_jsxDEV(CheckField, {\n      prefectures: prefectures.result,\n      onChange: handleClickCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: Styles.label,\n      children: \"\\u7DCF\\u4EBA\\u53E3\\u63A8\\u79FB\\u30B0\\u30E9\\u30D5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Graph, {\n      populationdata: prefPopulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateLayout, \"/E0EYH+wJRLcLtbHZPizVgqqe0k=\");\n_c = CreateLayout;\nexport default CreateLayout;\nvar _c;\n$RefreshReg$(_c, \"CreateLayout\");","map":{"version":3,"names":["React","useEffect","useState","CheckField","Graph","resasApi","jsxDEV","_jsxDEV","Styles","label","fontSize","marginLeft","CreateLayout","_s","prefectures","setPreFectures","prefPopulation","setPrefPopulation","getPreFectures","preFecturesData","handleClickCheck","prefName","prefCode","check","c_prefPopulation","slice","findIndex","value","preFecturePplData","getPreFecturePpl","String","push","data","deleteIndex","splice","children","style","fileName","_jsxFileName","lineNumber","columnNumber","result","onChange","populationdata","_c","$RefreshReg$"],"sources":["/show_ppl_pref_graph/src/createLayout.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport CheckField from './checkField';\nimport Graph from './graph';\nimport * as resasApi from './resasApi';\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  label: {\n    fontSize: '20px',\n    marginLeft: '10pt',\n  },\n};\n\nconst CreateLayout: React.FC = () => {\n  const [prefectures, setPreFectures] = useState<{\n    message: null;\n    result: {\n      prefCode: number;\n      prefName: string;\n    }[];\n  } | null>(null);\n  const [prefPopulation, setPrefPopulation] = useState<{ prefName: string; data: { year: number; value: number }[] }[]>([]);\n  //Reactのレンダリング完了後の処理\n  useEffect(() => {\n    // 都道府県一覧を取得する\n    const getPreFectures = async () => {\n      let preFecturesData = await resasApi.getPreFectures();\n      setPreFectures(preFecturesData);\n    };\n    getPreFectures();\n  }, []);\n\n  // チェックボックスをクリックした際の処理\n  const handleClickCheck = async (prefName: string, prefCode: number, check: boolean) => {\n    let c_prefPopulation = prefPopulation.slice();\n    if (check) {\n      if (c_prefPopulation.findIndex((value) => value.prefName === prefName) !== -1) {\n        return;\n      }\n      let preFecturePplData = await resasApi.getPreFecturePpl(String(prefCode));\n      c_prefPopulation.push({\n        prefName: prefName,\n        data: preFecturePplData,\n      });\n    } else {\n      const deleteIndex = c_prefPopulation.findIndex((value) => value.prefName === prefName);\n      if (deleteIndex === -1) return;\n      c_prefPopulation.splice(deleteIndex, 1);\n    }\n    setPrefPopulation(c_prefPopulation);\n  };\n\n  return (\n    <main>\n      <h2 style={Styles.label}>都道府県</h2>\n      {prefectures && <CheckField prefectures={prefectures.result} onChange={handleClickCheck} />}\n      <h2 style={Styles.label}>総人口推移グラフ</h2>\n      <Graph populationdata={prefPopulation} />\n    </main>\n  );\n};\n\nexport default CreateLayout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}