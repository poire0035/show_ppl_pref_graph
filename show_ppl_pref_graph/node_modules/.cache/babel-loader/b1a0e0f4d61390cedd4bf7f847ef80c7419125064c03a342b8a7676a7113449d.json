{"ast":null,"code":"var _jsxFileName = \"C:\\\\tool\\\\git\\\\show_ppl_pref_graph\\\\show_ppl_pref_graph\\\\src\\\\components\\\\Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CheckField from \"./CheckField\";\nimport Graph from \"./Graph\";\nimport * as resasApi from '../resasApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Styles = {\n  graph: {\n    padding: \"10px\"\n  },\n  label: {\n    fontSize: \"20px\",\n    padding: \"0.5rem 2rem\",\n    borderLeft: \"4px solid #000\",\n    marginLeft: \"10pt\"\n  }\n};\nconst Main = () => {\n  _s();\n  const [prefectures, setPreFectures] = useState(null);\n  const [prefPopulation, setPrefPopulation] = useState([]);\n  useEffect(() => {\n    // 都道府県一覧を取得する\n    // axios\n    //   .get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n    //     headers: { \"X-API-KEY\": REACT_APP_API_KEY },\n    //   })\n    //   .then((results) => {\n    //     setPreFectures(results.data);\n    //   })\n    //   .catch((error) => {});\n    const setData = async () => {\n      let preFecturesData = await resasApi.getPreFectures();\n      setPreFectures(preFecturesData);\n    };\n    setData();\n  }, []);\n\n  // チェックボックスをクリックした際の処理\n  const handleClickCheck = (prefName, prefCode, check) => {\n    let c_prefPopulation = prefPopulation.slice();\n\n    // チェックをつけた処理\n    if (check) {\n      if (c_prefPopulation.findIndex(value => value.prefName === prefName) !== -1) return;\n\n      // axios\n      //   .get(\n      //     \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n      //       String(prefCode),\n      //     {\n      //       headers: { \"X-API-KEY\": REACT_APP_API_KEY },\n      //     }\n      //   )\n      //   .then((results) => {\n      //     c_prefPopulation.push({\n      //       prefName: prefName,\n      //       data: results.data.result.data[0].data,\n      //     });\n\n      //     setPrefPopulation(c_prefPopulation);\n      //   })\n      //   .catch((error) => {\n      //     return;\n      //   });\n    }\n    // チェックを外した処理\n    else {\n      const deleteIndex = c_prefPopulation.findIndex(value => value.prefName === prefName);\n      if (deleteIndex === -1) return;\n      c_prefPopulation.splice(deleteIndex, 1);\n      setPrefPopulation(c_prefPopulation);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: Styles.label,\n      children: \"\\u90FD\\u9053\\u5E9C\\u770C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), prefectures && /*#__PURE__*/_jsxDEV(CheckField, {\n      prefectures: prefectures.result,\n      onChange: handleClickCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: Styles.label,\n      children: \"\\u4EBA\\u53E3\\u63A8\\u79FB\\u30B0\\u30E9\\u30D5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Graph, {\n      populationdata: prefPopulation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"/E0EYH+wJRLcLtbHZPizVgqqe0k=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","CheckField","Graph","resasApi","jsxDEV","_jsxDEV","Styles","graph","padding","label","fontSize","borderLeft","marginLeft","Main","_s","prefectures","setPreFectures","prefPopulation","setPrefPopulation","setData","preFecturesData","getPreFectures","handleClickCheck","prefName","prefCode","check","c_prefPopulation","slice","findIndex","value","deleteIndex","splice","children","style","fileName","_jsxFileName","lineNumber","columnNumber","result","onChange","populationdata","_c","$RefreshReg$"],"sources":["C:/tool/git/show_ppl_pref_graph/show_ppl_pref_graph/src/components/Main.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport CheckField from \"./CheckField\";\nimport Graph from \"./Graph\";\nimport * as resasApi from '../resasApi'\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  graph: {\n    padding: \"10px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    padding: \"0.5rem 2rem\",\n    borderLeft: \"4px solid #000\",\n    marginLeft: \"10pt\",\n  },\n};\n\nconst Main: React.FC = () => {\n  const [prefectures, setPreFectures] = useState<{\n    message: null;\n    result: {\n      prefCode: number;\n      prefName: string;\n    }[];\n  } | null>(null);\n  const [prefPopulation, setPrefPopulation] = useState<\n    { prefName: string; data: { year: number; value: number }[] }[]\n  >([]);\n\n  useEffect(() => {\n    // 都道府県一覧を取得する\n    // axios\n    //   .get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n    //     headers: { \"X-API-KEY\": REACT_APP_API_KEY },\n    //   })\n    //   .then((results) => {\n    //     setPreFectures(results.data);\n    //   })\n    //   .catch((error) => {});\n    const setData = async () => {\n      let preFecturesData = await resasApi.getPreFectures()\n      setPreFectures(preFecturesData);  \n    }\n    setData()\n  }, []);\n\n  // チェックボックスをクリックした際の処理\n  const handleClickCheck = (\n    prefName: string,\n    prefCode: number,\n    check: boolean\n  ) => {\n    let c_prefPopulation = prefPopulation.slice();\n\n    // チェックをつけた処理\n    if (check) {\n      if (\n        c_prefPopulation.findIndex((value) => value.prefName === prefName) !==\n        -1\n      )\n        return;\n\n      // axios\n      //   .get(\n      //     \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n      //       String(prefCode),\n      //     {\n      //       headers: { \"X-API-KEY\": REACT_APP_API_KEY },\n      //     }\n      //   )\n      //   .then((results) => {\n      //     c_prefPopulation.push({\n      //       prefName: prefName,\n      //       data: results.data.result.data[0].data,\n      //     });\n\n      //     setPrefPopulation(c_prefPopulation);\n      //   })\n      //   .catch((error) => {\n      //     return;\n      //   });\n    }\n    // チェックを外した処理\n    else {\n      const deleteIndex = c_prefPopulation.findIndex(\n        (value) => value.prefName === prefName\n      );\n      if (deleteIndex === -1) return;\n      c_prefPopulation.splice(deleteIndex, 1);\n      setPrefPopulation(c_prefPopulation);\n    }\n  };\n\n  return (\n    <main>\n      <h2 style={Styles.label}>都道府県</h2>\n      {prefectures && (\n        <CheckField\n          prefectures={prefectures.result}\n          onChange={handleClickCheck}\n        />\n      )}\n      <h2 style={Styles.label}>人口推移グラフ</h2>\n      <Graph populationdata={prefPopulation} />\n    </main>\n  );\n};\n\nexport default Main;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}